# -*- coding: utf-8 -*-
"""Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MVosqf6TRB14X3TCA1M6jF7HQCCXshXY
"""

pip install tiingo

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/

from tiingo import TiingoClient
# Set TIINGO_API_KEY in your environment variables in your .bash_profile, OR
# pass a dictionary with 'api_key' as a key into the TiingoClient.
config = {}

# To reuse the same HTTP Session across API calls (and have better performance), include a session key.
config['session'] = True

# If you don't have your API key as an environment variable,
# pass it in via a configuration dictionary.
config['api_key'] = "333019432fe95089c689230a0180e9d9b5efc0b8"

# Initialize
client = TiingoClient(config)

ticker_history = client.get_dataframe('GOOGL',
                                      startDate='2017-01-01',
                                      endDate='2021-05-01')
ticker_history_2 = client.get_dataframe('GOOGL',
                                      startDate='2013-01-01',
                                      endDate='2016-12-31')

ticker_history

ticker_history_2

ticker_history.to_csv('Ameya_stocks_train.csv',index='False')
ticker_history_2.to_csv('Ameya_stocks_test.csv',index ='False')



import pandas as pd
df = pd.read_csv('Ameya_stocks_train.csv')
df_3 = pd.read_csv('Ameya_stocks_train.csv')

df

df_2 = df.drop(['adjClose','adjHigh','adjLow','adjOpen','adjVolume','divCash','splitFactor'],axis = 1)
df_4 = df_3.drop(['adjClose','adjHigh','adjLow','adjOpen','adjVolume','divCash','splitFactor'],axis = 1)

df_2

import numpy as np
import matplotlib.pyplot as plt

dataset_train = pd.read_csv('Ameya_stocks_train.csv')
training_set = dataset_train.iloc[:, 4:5].values

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

X_train = []
y_train = []
for i in range(200, 1011):
    X_train.append(training_set_scaled[i-200:i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

X_train.shape

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50,kernel_initializer='glorot_uniform', return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50,kernel_initializer='glorot_uniform', return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50,kernel_initializer='glorot_uniform', return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50,kernel_initializer='glorot_uniform'))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs = 30, batch_size = 16)

dataset_test = pd.read_csv('Ameya_stocks_test.csv')
real_stock_price = dataset_test.iloc[:, 4:5].values

dataset_total = pd.concat((dataset_train['open'], dataset_test['open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 200:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = [] 
for i in range(200, 1101):
    X_test.append(inputs[i-200:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)



plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

regressor.save("Ameya_lstm",save_format='h5')